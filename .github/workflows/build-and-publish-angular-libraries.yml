name: build-and-publish-angular-libraries
on:
  workflow_call:
    inputs:
      webtier:
        required: true
        type: string
      node_version:
        required: true
        type: string
    secrets:
      verdaccio_token:
        required: true

jobs:
  build-and-publish-angular-libaries:
    runs-on: ubuntu-latest
    environment: ${{ inputs.webtier }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This is temporary until Verdaccio is gone.
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: 'https://verdaccio.vmit.cucloud.net'
          always-auth: true

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: build
        run: yarn build:${{ inputs.webtier }}

      - name: set main version suffix for sb
        run: |
          echo VERSION_SUFFIX=-beta.${{ github.run_number }} >> $GITHUB_ENV
          echo PACKAGE_TAG=beta >> $GITHUB_ENV
        if: ${{ inputs.webtier == 'sb'}}

      - name: set main version suffix for prod
        run: |
          echo VERSION_SUFFIX= >> $GITHUB_ENV
          echo PACKAGE_TAG=latest >> $GITHUB_ENV
        if: ${{ inputs.webtier == 'prod'}}

      - name: Publish Package to Verdaccio
        run: |
          for pkg in $(find dist -name package.json); do
            VERSION=$(jq --raw-output ".version" $pkg)${{ env.VERSION_SUFFIX }}
            yarn publish $(dirname ${pkg}) --no-git-tag-version --tag ${{ env.PACKAGE_TAG }} --new-version ${VERSION}
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.VERDACCIO_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@cuvmit'

      - run: |
          for pkg in $(find dist -name package.json); do
            VERSION=$(jq --raw-output ".version" ${pkg})${{ env.VERSION_SUFFIX }}
            npm version --no-git-tag-version --allow-same-version --workspaces-update=false --workspace=$(dirname ${pkg}) ${VERSION}
            npm publish $(dirname ${pkg}) --tag ${{ env.PACKAGE_TAG }} 
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
